{"version":3,"sources":["App.js"],"names":["Stack","createNativeStackNavigator","Warmups","navigation","style","styles","container","heading","text","data","id","name","image","description","renderItem","item","card","Cover","source","uri","fontSize","renderData","keyExtractor","homeButton","onPress","navigate","btnText","Cooldown","useState","seconds","setSeconds","isActive","setIsActive","useEffect","interval","setInterval","clearInterval","timerText","button","ExerciseScreen","route","count","setCount","params","exerciseList","exerciseKey","gotoExercise","useCallback","push","currentExercise","suggestedKey","find","ex","key","heading2","suggestedText","HomeScreen","flatList","App","Navigator","initialRouteName","Screen","component","options","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","StyleSheet","create","flex","alignItems","justifyContent","width","marginBottom","padding","margin","borderRadius","paddingVertical","paddingHorizontal","paddingBottom","color","textAlign","paddingTop","flexGrow"],"mappings":"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","file":"static/js/app.de34664f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { useState, useCallback, useEffect } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport {Card} from 'react-native-paper';\n\nconst Stack = createNativeStackNavigator();\n\nfunction Warmups({navigation}){\n  let stretches = [\n    { \n      id: 1,  \n      name: \"Standing Hamstring Stretch\", \n      image: 'https://media.self.com/photos/5a305db96c2fc24013a0aa78/master/w_728,c_limit/2_1Self.jpg',\n      description: \"Stand with your feet together and bend forward at the hips. Wrap your arms around the backs of your legs and hold the position.\",\n    },\n    { \n      id: 2, \n      name: \"Triceps stretch\", \n      image: 'https://www.womenfitness.net/img2016/components/flex-triceps-stretch.jpg',\n      description: \"Bend your right elbow and reach your right hand to touch the top middle of your back.\",\n    },\n    { \n      id: 3,  \n      name: \"Butterfly stretch\",\n      image: 'https://www.verywellfit.com/thmb/umsZNk7EYmmCNb6N_NQtw7SC4yA=/2667x2000/smart/filters:no_upscale()/87-3120294-ButterflyStretches0263-49db496667e54ab0b6528e7dee2d329c.jpg',\n      description: \"Sit on the floor or a prop with the soles of your feet pressing into each other.\",\n    },\n  ]\n  const renderData = (item) => {\n    return(\n      <Card style = {styles.card}>\n        <Card.Cover source={{ uri: item.image }}/>\n        <Text style = {{fontSize:25}}>{item.name}</Text>\n        <Text style = {{fontSize:15}}>{item.description}</Text>\n      </Card>   \n    )\n  }\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Warm ups</Text>\n      <Text style={styles.text}>Warming up before exercising can help increase performance and reduce chances of injury. Do these warm ups before you start your exercise.</Text>\n      <FlatList\n      data = {stretches}\n      renderItem = {({item}) => {\n          return renderData(item)\n      }}\n      keyExtractor = {item => `${item.id}`}\n      />\n      <TouchableOpacity \n          style={styles.homeButton} \n          onPress={() => navigation.navigate('Home')}>\n            <Text style={styles.btnText}>Home</Text>\n      </TouchableOpacity>  \n    </View>\n  )\n}\n\nfunction Cooldown({navigation}) {\n  //storing the number of seconds and setting seconds to 45\n  let [seconds, setSeconds] = useState(45);\n  //storing the timer's state (active/timing or paused), setting the default to paused (false)\n  let [isActive, setIsActive] = useState(false);\n\n  //setting the value of isActive to the opposite of what it is (if it is paused it will switch to timing and vice versa)\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  //resetting the timer by setting seconds to 45 and setting isActive to false \n  function reset() {\n    setSeconds(45);\n    setIsActive(false);\n  }\n\n  //if isActive is true set the interval to decrease by 1 every 1000 milliseconds\n  //if setActive is false, the interval is cleared\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Cool Down</Text>\n      <Text style={styles.text}>Take 45 seconds to cool down by taking deep breaths in and out. Close your eyes and use this time to meditate as you start to relax.</Text>\n      <Text style={styles.timerText}>{seconds}s</Text>\n      <TouchableOpacity \n        style={styles.button} \n        onPress={toggle}>\n          <Text style={styles.btnText}>{isActive ? 'Pause' : 'Start'}</Text>\n      </TouchableOpacity>\n      <TouchableOpacity \n        style={styles.button} \n        onPress={reset}>\n          <Text style={styles.btnText}>Reset</Text>\n      </TouchableOpacity>\n      <TouchableOpacity \n        style={styles.homeButton} \n        onPress={() => navigation.navigate('Home')}>\n          <Text style={styles.btnText}>Home</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\n\nfunction ExerciseScreen({ route, navigation }) {\n  let [count, setCount] = useState(0);\n  let {exerciseList, exerciseKey } = route.params\n  let gotoExercise = useCallback(() => {\n    navigation.push(\"RepetitionExercise\", { exerciseList: exerciseList, exerciseKey: currentExercise.suggestedKey, count: route.params.count + 1})\n  })\n  let currentExercise = exerciseList.find(ex => ex.key === exerciseKey)\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>{currentExercise.name}</Text>\n      <Text style={styles.text}>{currentExercise.description}</Text> \n\n      <Text style={styles.heading2}>Reps: {count}</Text>\n      <TouchableOpacity \n        style={styles.button} \n        onPress={() => setCount(count + 1)}>\n          <Text style={styles.btnText}>Complete rep</Text>\n      </TouchableOpacity>\n      <TouchableOpacity \n        style={styles.button} \n        onPress={() => setCount(0)}>\n          <Text style={styles.btnText}>Reset</Text>\n      </TouchableOpacity>\n      <Text style={styles.suggestedText}>Suggested exercise:</Text>\n      <TouchableOpacity \n        style={styles.button} \n        onPress={gotoExercise}>\n          <Text style={styles.btnText}>Go to Screen</Text>\n      </TouchableOpacity>\n      <TouchableOpacity \n        style={styles.homeButton} \n        onPress={() => navigation.navigate('Home')}>\n          <Text style={styles.btnText}>Home</Text>\n      </TouchableOpacity>\n\n      <StatusBar style='auto'/>\n    </View>\n  );\n}\n\n\nfunction HomeScreen({ navigation }) {\n  let exerciseList = [\n  { \n    key: \"1\",  \n    name: \"Pushups\", \n    description: \"Done laying with face, palms and toes facing down, keeping legs and back straight, extending arms straight to push body up and back down again\" ,\n    suggestedKey: \"2\"\n  },\n  { \n    key: \"2\", \n    name: \"Jumping Jacks\", \n    description: \"Performed from a standing position by jumping to a position with legs spread and arms raised\",\n    suggestedKey: \"3\"\n  },\n  { \n    key: \"3\",  \n    name: \"Sit ups\",\n    description: \"Done by lying on your back and lifting your torso\",\n    suggestedKey: \"1\"\n  },\n]\n\n  let gotoExercise = useCallback(({ key }) => {\n    navigation.navigate(\"RepetitionExercise\", { exerciseKey: key, count: 0, exerciseList })\n  })\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Workout Plan</Text>\n      <TouchableOpacity \n        style={styles.button} \n        onPress={() => navigation.navigate('Warmups')}>\n          <Text style={styles.btnText}>Warm ups</Text>\n      </TouchableOpacity>\n      <FlatList \n        style={styles.flatList}\n        data={exerciseList}\n        renderItem={\n          ({ item }) => \n          <TouchableOpacity \n            style={styles.button} \n            onPress={() => gotoExercise(item)}>\n              <Text style={styles.btnText}>{item.name}</Text>\n          </TouchableOpacity>\n        }\n      />\n      <TouchableOpacity \n        style={styles.button} \n        onPress={() => navigation.navigate('Cooldown')}>\n          <Text style={styles.btnText}>Cool down</Text>\n      </TouchableOpacity>\n      <StatusBar style='auto'/>\n    </View>\n  );\n}\n\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} options={{\n          headerStyle: {\n            backgroundColor: '#e99f4c',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}/>\n        <Stack.Screen name=\"RepetitionExercise\" component={ExerciseScreen} options={{\n          headerStyle: {\n            backgroundColor: '#e99f4c',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}/>\n        <Stack.Screen name=\"Warmups\" component={Warmups} options={{\n          headerStyle: {\n            backgroundColor: '#e99f4c',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}/>\n        <Stack.Screen name=\"Cooldown\" component={Cooldown} options={{\n          headerStyle: {\n            backgroundColor: '#e99f4c',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}/>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#eddcd9',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    width: '300px',\n    marginBottom: '30px',\n  },\n  card: {\n    width: 300,\n    padding: 10, \n    margin: 10, \n    backgroundColor:\"#fff\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#2a403d\",\n    borderRadius: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    width: 100,\n    margin: 5,\n  },\n  timerText: {\n    fontSize: 100,\n    paddingBottom: 50,\n  },\n  btnText: {\n    color: \"white\",\n    fontSize: 20,\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n  heading: {\n    fontWeight: 700,\n    fontSize: 40,\n    paddingBottom: 40,\n    paddingTop: 50,\n    color: '#d85678',\n  },\n  heading2: {\n    fontSize: 25,\n    paddingBottom: 15,\n  },\n  suggestedText: {\n    fontSize: 25,\n    paddingBottom: 15,\n    paddingTop: 20,\n  },\n  homeButton: {\n    alignItems: \"center\",\n    backgroundColor: \"#e99f4c\",\n    borderRadius: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 12,\n    width: 100,\n    margin: 5,\n  },\n  flatList: {\n    flexGrow: 0,\n  }\n});"],"sourceRoot":""}